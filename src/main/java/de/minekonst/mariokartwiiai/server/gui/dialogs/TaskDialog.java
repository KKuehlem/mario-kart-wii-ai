package de.minekonst.mariokartwiiai.server.gui.dialogs;

import org.apache.commons.math3.geometry.euclidean.threed.Vector3D;
import de.minekonst.mariokartwiiai.client.DriverState;
import de.minekonst.mariokartwiiai.main.Main;
import de.minekonst.mariokartwiiai.server.AIServer;
import de.minekonst.mariokartwiiai.server.RemoteDriver;
import de.minekonst.mariokartwiiai.server.TaskSupplier;
import de.minekonst.mariokartwiiai.server.ai.AI;
import de.minekonst.mariokartwiiai.server.ai.types.ArchivedNetwork;
import de.minekonst.mariokartwiiai.server.ai.types.Replay;
import de.minekonst.mariokartwiiai.shared.tasks.LearningTask;
import de.minekonst.mariokartwiiai.shared.tasks.ReplayTask;
import de.minekonst.mariokartwiiai.shared.tasks.Task;
import de.minekonst.mariokartwiiai.shared.tasks.TaskResponse;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.function.Supplier;
import javax.swing.JOptionPane;

public class TaskDialog extends javax.swing.JDialog {

    private final ArrayList<RemoteDriver> clients;
    private final List<Replay> replays;
    private final List<ArchivedNetwork> networks;
    private final AI<?, ?> ai;

    public TaskDialog(java.awt.Frame parent, AIServer server, AI ai) {
        super(parent, true);
        initComponents();

        clients = new ArrayList<>(server.getRemoteDrivers());
        replays = new ArrayList<>(ai.getReplayArchive());
        networks = new ArrayList<>(ai.getArchivedNetworks());
        this.ai = ai;

        Collections.reverse(replays);
        Collections.reverse(networks);

        if (clients.isEmpty()) {
            JOptionPane.showMessageDialog(parent, "No Drivers conncted", "Error", JOptionPane.ERROR_MESSAGE);
            super.setVisible(false);
            return;
        }

        combDriver.removeAllItems();
        for (RemoteDriver d : clients) {
            combDriver.addItem(String.format("#%,d (%s)",
                    d.getServerClient().getID(), d.getServerClient().getHostname()));
        }
        combNetwork.removeAllItems();
        for (ArchivedNetwork net : networks) {
            combNetwork.addItem(net.toString());
        }
        combReplay.removeAllItems();
        for (Replay r : replays) {
            combReplay.addItem(r.toString());
        }
        updateComponents();

        super.setTitle("Create a Task");
        super.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        combDriver = new javax.swing.JComboBox<>();
        radioNetwork = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();
        combNetwork = new javax.swing.JComboBox<>();
        radioReplay = new javax.swing.JRadioButton();
        jLabel3 = new javax.swing.JLabel();
        combReplay = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        checkDebug = new javax.swing.JCheckBox();
        jLabel4 = new javax.swing.JLabel();
        inN = new javax.swing.JTextField();
        checkUserControlled = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Driver:");

        combDriver.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        radioNetwork.setSelected(true);
        radioNetwork.setText("Watch Network");
        radioNetwork.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioNetworkActionPerformed(evt);
            }
        });

        jLabel2.setText("Select Network:");

        combNetwork.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        radioReplay.setText("Watch Replay");
        radioReplay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioReplayActionPerformed(evt);
            }
        });

        jLabel3.setText("Select Replay:");

        combReplay.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jButton1.setText("Start");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Cancel");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        checkDebug.setText("Debug");
        checkDebug.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkDebugActionPerformed(evt);
            }
        });

        jLabel4.setText("Amount: ");

        inN.setText("1");

        checkUserControlled.setText("User Controlled");
        checkUserControlled.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkUserControlledActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(combDriver, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(checkUserControlled)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(20, 20, 20)
                                .addComponent(combNetwork, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(radioNetwork)
                            .addComponent(radioReplay)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addGap(18, 18, 18)
                                        .addComponent(inN, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addGap(18, 18, 18)
                                        .addComponent(combReplay, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(checkDebug))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(combDriver, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(radioNetwork)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(combNetwork, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(checkUserControlled)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(radioReplay)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(combReplay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(checkDebug)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(inN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        super.setVisible(false);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void radioNetworkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioNetworkActionPerformed
        radioReplay.setSelected(!radioNetwork.isSelected());
        updateComponents();
    }//GEN-LAST:event_radioNetworkActionPerformed

    private void radioReplayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioReplayActionPerformed
        radioNetwork.setSelected(!radioReplay.isSelected());
        updateComponents();
    }//GEN-LAST:event_radioReplayActionPerformed

    @SuppressWarnings({"rawtypes", "unchecked"})
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        RemoteDriver driver = clients.get(combDriver.getSelectedIndex());
        if (driver.getState() != DriverState.Waiting) {
            JOptionPane.showMessageDialog(this, "Driver is busy (State = " + driver.getState() + ")", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        Supplier<? extends Task> s = null;
        if (radioNetwork.isSelected()) {
            ArchivedNetwork net = networks.get(combNetwork.getSelectedIndex());
            s = () -> new LearningTask(
                    ai.getLearningMethod().createObserver(), net.getNetwork(ai.getLearningMethod()),
                    ai.getProperties().getTrack().getValue().ordinal(),
                    "Replay", ai.getProperties(), null,
                    checkUserControlled.isSelected(),
                    checkUserControlled.isSelected() ? "- User Controlled -" : "- Network Replay -", true);
        }
        else {
            Replay replay = replays.get(combReplay.getSelectedIndex());
            s = () -> new ReplayTask(ai.getProperties().getTrack().getValue().ordinal(),
                    ai.getProperties().getDataHolder().getLearningMethod().getInputMethod(), replay.getReplay(), ai.getProperties());
        }

        if (!checkDebug.isSelected()) {
            TaskSupplier.sendTask(driver, s.get(), (TaskResponse r) -> {
                Main.log("Driver #%d scored %.2f (%s) | %s",
                        driver.getServerClient().getID(), r.getScore().getScorePoints(), r.getScore().toString(), r.getScore().getTime());
            });
        }
        else {
            int n;
            try {
                n = Integer.valueOf(inN.getText());
            }
            catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(this, inN.getText() + " is not a number",
                        "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            if (n > 0) {
                TaskSupplier.sendTasks(n, driver, s,
                        (Integer done) -> {
                            Main.log("[%.2f %%] %,d / %,d done",
                                    100.0 * done / n, done, n);
                        },
                        (List<TaskResponse> rs) -> {
                            debug(rs);
                        });
            }
            else {
                JOptionPane.showMessageDialog(this, "Amount must be > 0",
                        "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        super.setVisible(false);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void checkDebugActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkDebugActionPerformed
        updateComponents();
    }//GEN-LAST:event_checkDebugActionPerformed

    private void checkUserControlledActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkUserControlledActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_checkUserControlledActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox checkDebug;
    private javax.swing.JCheckBox checkUserControlled;
    private javax.swing.JComboBox<String> combDriver;
    private javax.swing.JComboBox<String> combNetwork;
    private javax.swing.JComboBox<String> combReplay;
    private javax.swing.JTextField inN;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JRadioButton radioNetwork;
    private javax.swing.JRadioButton radioReplay;
    // End of variables declaration//GEN-END:variables

    private void updateComponents() {
        combNetwork.setEnabled(radioNetwork.isSelected());
        combReplay.setEnabled(radioReplay.isSelected());
        inN.setEnabled(checkDebug.isSelected());
        checkUserControlled.setEnabled(radioNetwork.isSelected());
    }

    private void debug(List<TaskResponse> rs) {
        final String bar = "=".repeat(90);

        rs.sort((a, b) -> Double.compare(a.getLastPosition().distance(Vector3D.ZERO), b.getLastPosition().distance(Vector3D.ZERO)));
        double last = 0;
        Main.log(bar);
        List<String> list = new ArrayList<>();
        int groups = 0;
        int counter = 0;
        List<Integer> count = new ArrayList<>();
        Vector3D lastPos = Vector3D.ZERO;

        for (TaskResponse r : rs) {
            double l = r.getLastPosition().distance(Vector3D.ZERO);
            if (Math.abs(last - l) > 5
                    || Math.abs(lastPos.getX() - r.getLastPosition().getX()) > 5
                    || Math.abs(lastPos.getZ() - r.getLastPosition().getZ()) > 5) {
                list.add(bar);
                groups++;
                if (counter > 0) {
                    count.add(counter);
                }

                counter = 0;
            }

            list.add(String.format("%4.2f | Position = %s, Rotation = %s | Score = %.2f",
                    l, r.getLastPosition(), r.getLastRotation(), r.getScore().getScorePoints()));

            last = l;
            lastPos = r.getLastPosition();
            counter++;
        }
        count.add(counter);
        Main.log("Number of runs: %,d | Groups = %,d", rs.size(), groups);

        String amount = "[";
        String percent = "[";
        boolean first = true;
        for (int c : count) {
            if (!first) {
                amount += ", ";
                percent += ", ";
            }
            amount += String.format("%-6d", c);
            percent += String.format("%3.1f %%", 100.0 * c / rs.size());

            first = false;
        }
        amount += "]";
        percent += "]";

        Main.log("Runs in group: %s", amount);
        Main.log("Percentage   : %s", percent);

        for (String s : list) {
            Main.log(s);
        }
    }
}
